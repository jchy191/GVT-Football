generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  // Uses connection pooling
  url       = env("POSTGRES_PRISMA_URL")
  // Uses direct connection, ⚠️ make sure to keep this to `POSTGRES_URL_NON_POOLING`
  // or you'll have dangling databases from migrations
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          String?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  logs          Log[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Team {
  name    String   @unique
  regdate DateTime
  // Prisma does not support integers as enums...
  groupno Int

  matcha Match[] @relation(name: "teama")
  matchb Match[] @relation(name: "teamb")
}

model Match {
  order  Int
  namea  String
  nameb  String
  teama  Team   @relation(name: "teama", fields: [namea], references: [name])
  teamb  Team   @relation(name: "teamb", fields: [nameb], references: [name])
  goalsa Int
  goalsb Int

  @@id([namea, nameb])
}

model Form {
  teams   String @id
  matches String
}

enum LogType {
  CREATE
  UPDATE
  DELETE
}

model Log {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  action      LogType
  formTeams   String?
  formMatches String?
}
